/*
 * Copyright (c) 2020-2022 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/ext_power.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/rgb.h>
#include <../boards/shields/kyria/boards/nice_nano.overlay>

#define DEFAULT  0
#define NAVI     1
#define FUNCTION 2
#define SYMBOLS  3
#define NUMERIC  4
#define CONFIG   5

/ {
	conditional_layers {
		compatible = "zmk,conditional-layers";
		tri_layer {
			if-layers = <NAVI SYMBOLS>;
			then-layer = <CONFIG>;
		};
	};
	
	behaviors {
		emqm: exclamation_mark_question_mark {
			compatible = "zmk,behavior-mod-morph";
			label = "EM_QM";
			#binding-cells = <0>;
			bindings = <&kp LS(N1)>, <&kp LS(MINUS)>;
			mods = <(MOD_LSFT)>;
		};
	};

	keymap {
		compatible = "zmk,keymap";

		default_layer {
// ---------------------------------------------------------------------------------------------------------------------------------
// |  ESC  |  Q  |  W  |  E   |  R   |  T   |                                          |  Y   |  U    |  I    |  O   |   P   |   Ç  |
// |   º   |  A  |  S  |  D   |  F   |  G   |                                          |  H   |  J    |  K    |  L   |   Ñ   |   ´  |
// |   ¿   |  Z  |  X  |  C   |  V   |  B   | DEL LSF |   ALT   |  |   TAB   | L SHIFT |  N   |  M    |  ,    |  .   |   -   |   ?  |
//                     |W+Sh+S| CAPS | NAV  |  BSPC   |   CTRL  |  |  ENTER  |  SPACE  | SYM  | GUI   |  ≡    |
			bindings = <
	&kp ESC   &kp Q &kp W         &kp E       &kp R    &kp T                                                    &kp Y    &kp U       &kp I     &kp O   &kp P    &kp NON_US_HASH
	&kp GRAVE &kp A &kp S         &kp D       &kp F    &kp G                                                    &kp H    &kp J       &kp K     &kp L   &kp SEMI &kp SQT
	&kp EQUAL &kp Z &kp X         &kp C       &kp V    &kp B    &mt LSHFT DEL  &kp LALT   &kp TAB   &kp LSHFT   &kp N    &kp M       &kp COMMA &kp DOT &kp FSLH &emqm
					&kp LG(LS(S)) &kp CAPS    &mo NAVI &kp BSPC &kp LCTRL      &kp RET    &kp SPACE &mo SYMBOLS &kp LGUI &kp K_CMENU
			>;
		};

		navigation_layer {
// ---------------------------------------------------------------------------------------------------------------------------------
// |       | CtY | CtZ | Ct+V | Ct+C | Ct+X |                                          | PaUp | Home  |  Up   | End  | C+Hom |      |
// |       | GUI | ALT | CTRL | LSFT |      |                                          | PaDn | Left  | Down  |Right | C+End |      |
// |       | FUN |     |      |      |      |         |         |  |         |         |      |       |       |      |       |      |
//                     |      |      |      |         |         |  |         |         |      |       |       |
			bindings = <
	&trans &kp LC(Y)    &kp LC(Z) &kp LC(V) &kp LC(C) &kp LC(X)                               &kp PG_UP &kp HOME &kp UP   &kp END   &kp LC(HOME) &none
	&none  &kp LGUI     &kp LALT  &kp LCTRL &kp LSHFT &none                                   &kp PG_DN &kp LEFT &kp DOWN &kp RIGHT &kp LC(END)  &none
	&none  &mo FUNCTION &none     &none     &none     &none     &trans &trans   &trans &trans &none     &none    &none    &none     &none        &none
								  &trans    &trans    &trans    &trans &trans   &trans &trans &trans    &trans   &trans
			>;
		};

		function_layer {
// ---------------------------------------------------------------------------------------------------------------------------------
// |       |     |     |      |      |      |                                          |      |  F5   |  F11  | F12  |       |      |
// |       |     |     |      |      |      |                                          |      |  F1   |  F2   | F3   |ALT+F4 |      |
// |       | TR  |     |      |      |      |         |         |  |         |         |      |       |       |      |       |      |
//                     |      |      |      |         |         |  |         |         |      |       |       |
			bindings = <
	&trans &none  &none &none  &none &none                                 &none  &kp F5 &kp F11 &kp F12 &none      &none
	&none  &none  &none &none  &none &none                                 &none  &kp F1 &kp F2  &kp F3  &kp LA(F4) &none
	&none  &trans &none &none  &none &none   &trans &trans   &trans &trans &none  &none  &none   &none   &none      &none
						&trans &trans &trans &trans &trans   &trans &trans &trans &trans &trans
			>;
		};

		symbols_layer {
// ---------------------------------------------------------------------------------------------------------------------------------
// |       |  |  |  &  |   {  |  }   |  "   |                                          |  $   |   [   |   ]   |  %   |   @   |      |
// |   -   |  *  |  +  |   (  |  )   |  =   |                                          |  ;   |   <   |   >   |  /   |   \   |      |
// |       |     |     |   ~  |  `   |  '   |         |         |  |         |         |  #   |   ^   |   €   |      |  NUM  |      |
//                     |      |      |      |         |         |  |         |         |      |       |       |
			bindings = <
	&trans    &kp RA(N1)   &kp LS(N6) &kp RA(SQT) &kp RA(NON_US_HASH) &kp LS(N2)                               &kp LS(N4)    &kp RA(LBKT)    &kp RA(RBKT)        &kp LS(N5) &kp RA(N2)    &none
	&kp SLASH &kp LS(RBKT) &kp RBKT   &kp LS(N8)  &kp LS(N9)          &kp LS(N0)                               &kp LS(COMMA) &kp NON_US_BSLH &kp LS(NON_US_BSLH) &kp LS(N7) &kp RA(GRAVE) &none
	&none     &none        &none      &kp RA(N4)  &kp LBKT            &kp MINUS  &trans &trans   &trans &trans &kp RA(N3)    &kp LS(LBKT)    &kp RA(E)           &none      &mo NUMERIC   &none
									  &trans      &trans              &trans     &trans &trans   &trans &trans &trans        &trans          &trans
			>;
		};

		numeric_layer {
// ---------------------------------------------------------------------------------------------------------------------------------
// |       |  6  |  7  |   8  |   9  |   0  |                                          |       |       |      |      |       |      |
// |       |  1  |  2  |   3  |   4  |   5  |                                          |       |       |      |      |       |      |
// |       |  /  |  :  |   ,  |   .  |   -  |         |         |  |         |         |       |       |      |      | TRANS |      |
//                     |      |      |      |         |         |  |         |         |       |       |      |
			bindings = <
	&trans &kp N6       &kp N7      &kp N8    &kp N9  &kp N0                                      &none  &none  &none &none &none  &none
	&none  &kp N1       &kp N2      &kp N3    &kp N4  &kp N5                                      &none  &none  &none &none &none  &none
	&none  &kp KP_SLASH &kp LS(DOT) &kp COMMA &kp DOT &kp KP_MINUS  &trans &trans   &trans &trans &none  &none  &none &none &trans &none
									&trans    &trans  &trans        &trans &trans   &trans &trans &trans &trans &trans
			>;
		};

		configuration_layer {
// ---------------------------------------------------------------------------------------------------------------------------------
// |        |    | BRI | SAI  | HUI  | EFF  |                                          |       | NEXT  | VOLUP| OUSB | BTNEXT|      |
// |        |    | BRD | SAD  | HUD  | TOG  |                                          |       | PLAY  | MUTE | OBLE | BT_CLR|      |
// |        |    |     |      |      | EFR  |         |         |  |         |         |       | PREV  | VOLDN|      | BTPREV|      |
//                     |      |      |      |         |         |  |         |         |       |       |      |
			bindings = <
	&trans &none &rgb_ug RGB_BRI &rgb_ug RGB_SAI &rgb_ug RGB_HUI &rgb_ug RGB_EFF                             &none  &kp C_NEXT &kp C_VOL_UP &out OUT_USB &bt BT_NXT &none
	&none  &none &rgb_ug RGB_BRD &rgb_ug RGB_SAD &rgb_ug RGB_HUD &rgb_ug RGB_TOG                             &none  &kp C_PP   &kp C_MUTE   &out OUT_BLE &bt BT_CLR &none
	&none  &none &none           &none           &none           &rgb_ug RGB_EFR &trans &trans &trans &trans &none  &kp C_PREV &kp C_VOL_DN &none        &bt BT_PRV &none
								 &trans          &trans          &trans          &trans &trans &trans &trans &trans &trans     &trans
			>;
		};
	};
};
